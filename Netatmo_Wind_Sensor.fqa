{"name":"Netatmo Wind Sensor","type":"com.fibaro.windSensor","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_213"},"sections":{"items":[{"components":[{"name":"label1","style":{"weight":"1.2"},"text":"Netatmo Wind Sensor","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"button2_1","style":{"weight":"0.50"},"text":"Wind Strength","type":"button"},{"name":"button2_2","style":{"weight":"0.50"},"text":"Wind Angle","type":"button"}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"button2_3","style":{"weight":"0.50"},"text":"Gust Strength","type":"button"},{"name":"button2_4","style":{"weight":"0.50"},"text":"Gust Angle","type":"button"}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"button1","style":{"weight":"1.2"},"text":"Refresh","type":"button"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_213"}}},"uiCallbacks":[{"callback":"showWindStrength","eventType":"onReleased","name":"button2_1"},{"callback":"showWindAngle","eventType":"onReleased","name":"button2_2"},{"callback":"showGustStrength","eventType":"onReleased","name":"button2_3"},{"callback":"showGustAngle","eventType":"onReleased","name":"button2_4"},{"callback":"button1Event","eventType":"onReleased","name":"button1"}],"quickAppVariables":[{"name":"Client ID","value":"-"},{"name":"Client Secret","value":"-"},{"name":"Username","value":"-"},{"name":"Password","value":"-"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"--[[\nNetatmo Wind Sensor\n@author ikubicki\n]]\n\nfunction QuickApp:onInit()\n    self.config = Config:new(self)\n    self.auth = Auth:new(self.config)\n    self.http = HTTPClient:new({\n        baseUrl = 'https://api.netatmo.com/api'\n    })\n    self.i18n = i18n:new(api.get(\"/settings/info\").defaultLanguage)\n    self:trace('')\n    self:trace('Netatmo wind sensor')\n    self:trace('User:', self.config:getUsername())\n    self:updateProperty('manufacturer', 'Netatmo')\n    self:updateProperty('manufacturer', 'Wind sensor')\n    self:run()\n    self:updateView(\"button2_1\", \"text\", self.i18n:get('Wind Strength'))\n    self:updateView(\"button2_2\", \"text\", self.i18n:get('Wind Angle')) \n    self:updateView(\"button2_3\", \"text\", self.i18n:get('Gust Strength'))\n    self:updateView(\"button2_4\", \"text\", self.i18n:get('Gust Angle'))\n    self.data = {[\"0\"] = 0, [\"1\"] = 0, [\"24\"] = 0}\nend\n\nfunction QuickApp:run()\n    self:pullNetatmoData()\n    local interval = self.config:getTimeoutInterval()\n    if (interval > 0) then\n        fibaro.setTimeout(interval, function() self:run() end)\n    end\nend\n\nfunction QuickApp:pullNetatmoData()\n    local url = '/getstationsdata'\n    self:updateView(\"button1\", \"text\", self.i18n:get('please-wait'))\n    if string.len(self.config:getDeviceID()) > 3 then\n        -- QuickApp:debug('Pulling data for device ' .. self.config:getDeviceID())\n        url = url .. '?device_id=' .. self.config:getDeviceID()\n    else\n        -- QuickApp:debug('Pulling data')\n    end\n    local callback = function(response)\n        local data = json.decode(response.data)\n        if data.error and data.error.message then\n            QuickApp:error(data.error.message)\n            return false\n        end\n\n        local device = data.body.devices[1]\n        local module = nil\n\n        for _, deviceModule in pairs(device.modules) do\n            if deviceModule.type == \"NAModule2\" then\n                if string.len(self.config:getModuleID()) < 4 or self.config:getModuleID() == deviceModule[\"_id\"] then\n                    module = deviceModule\n                end\n            end\n        end\n    \n        if self.config:getDataType() == 'gust' then\n            self:updateProperty(\"value\", module.dashboard_data.GustStrength)\n        else\n            self:updateProperty(\"value\", module.dashboard_data.WindStrength)\n        end\n\n        self:updateProperty(\"unit\", \"km/h\")\n\n        self.data = {\n            wind = {\n                strength = module.dashboard_data.WindStrength,\n                angle = module.dashboard_data.WindAngle\n            },\n            gust = {\n                strength = module.dashboard_data.GustStrength,\n                angle = module.dashboard_data.GustAngle\n            }\n        }\n\n        self:trace('Module ' .. module[\"_id\"] .. ' updated')\n        self:updateView(\"label1\", \"text\", string.format(self.i18n:get('last-update'), os.date('%Y-%m-%d %H:%M:%S')))\n        self:updateView(\"button1\", \"text\", self.i18n:get('refresh'))\n        \n        if string.len(self.config:getDeviceID()) < 4 then\n            self.config:setDeviceID(device[\"_id\"])\n        end\n        if string.len(self.config:getModuleID()) < 4 then\n            self.config:setModuleID(module[\"_id\"])\n        end\n    end\n    \n    self.http:get(url, callback, nil, self.auth:getHeaders({}))\n    \n    return {}\nend\n\nfunction QuickApp:button1Event()\n    self:pullNetatmoData()\nend\n\nfunction QuickApp:showWindStrength()\n    self:updateView(\"button2_1\", \"text\", self.data.wind.strength .. \" km/h\")\n    fibaro.setTimeout(5000, function() \n        self:updateView(\"button2_1\", \"text\", self.i18n:get('Wind Strength')) \n    end)\nend\n\nfunction QuickApp:showWindAngle()\n    self:updateView(\"button2_2\", \"text\", self.data.wind.strength .. \" °\")\n    fibaro.setTimeout(5000, function() \n        self:updateView(\"button2_2\", \"text\", self.i18n:get('Wind Angle')) \n    end)\nend\n\nfunction QuickApp:showGustStrength()\n    self:updateView(\"button2_3\", \"text\", self.data.gust.strength .. \" km/h\")\n    fibaro.setTimeout(5000, function() \n        self:updateView(\"button2_3\", \"text\", self.i18n:get('Gust Strength')) \n    end)\nend\n\nfunction QuickApp:showGustAngle()\n    self:updateView(\"button2_4\", \"text\", self.data.gust.angle .. \" °\")\n    fibaro.setTimeout(5000, function() \n        self:updateView(\"button2_4\", \"text\", self.i18n:get('Gust Angle')) \n    end)\nend"},{"name":"Config","isMain":false,"isOpen":true,"content":"--[[\r\nConfiguration handler\r\n@author ikubicki\r\n]]\r\nclass 'Config'\r\n\r\nfunction Config:new(app)\r\n    self.app = app\r\n    self:init()\r\n    return self\r\nend\r\n\r\nfunction Config:getClientID()\r\n    return self.clientID\r\nend\r\n\r\nfunction Config:getClientSecret()\r\n    return self.clientSecret\r\nend\r\n\r\nfunction Config:getUsername()\r\n    return self.username\r\nend\r\n\r\nfunction Config:getPassword()\r\n    return self.password\r\nend\r\n\r\nfunction Config:getDeviceID()\r\n    return self.deviceID\r\nend\r\n\r\nfunction Config:getModuleID()\r\n    return self.moduleID\r\nend\r\n\r\nfunction Config:setDeviceID(deviceID)\r\n    if string.len(self.deviceID) > 3 then\r\n        return false\r\n    end\r\n    self.app:setVariable(\"Device ID\", deviceID)\r\n    self.deviceID = deviceID\r\nend\r\n\r\nfunction Config:setModuleID(moduleID)\r\n    if string.len(self.moduleID) > 3 then\r\n        return false\r\n    end\r\n    self.app:setVariable(\"Module ID\", moduleID)\r\n    self.moduleID = moduleID\r\nend\r\n\r\nfunction Config:getTimeoutInterval()\r\n    return tonumber(self.interval) * 60000\r\nend\r\n\r\nfunction Config:getDataType()\r\n    return self.dataType\r\nend\r\n\r\nfunction Config:setDataType(dataType)\r\n    if string.len(self.dataType) > 3 then\r\n        return false\r\n    end\r\n    self.app:setVariable(\"Data Type\", dataType)\r\n    self.dataType = dataType\r\nend\r\n\r\n--[[\r\nThis function takes variables and sets as global variables if those are not set already.\r\nThis way, adding other devices might be optional and leaves option for users, \r\nwhat they want to add into HC3 virtual devices.\r\n]]\r\nfunction Config:init()\r\n    self.clientID = self.app:getVariable('Client ID')\r\n    self.clientSecret = self.app:getVariable('Client Secret')\r\n    self.username = self.app:getVariable('Username')\r\n    self.password = self.app:getVariable('Password')\r\n    self.deviceID = tostring(self.app:getVariable('Device ID'))\r\n    self.moduleID = tostring(self.app:getVariable('Module ID'))\r\n    self.interval = self.app:getVariable('Refresh Interval')\r\n    self.dataType = self.app:getVariable('Data Type')\r\n\r\n    local storedClientID = Globals:get('netatmo_client_id')\r\n    local storedClientSecret = Globals:get('netatmo_client_secret')\r\n    local storedUsername = Globals:get('netatmo_username')\r\n    local storedPassword = Globals:get('netatmo_password')\r\n    local storedInterval = Globals:get('netatmo_interval')\r\n    -- handling client ID\r\n    if string.len(self.clientID) < 4 and string.len(storedClientID) > 3 then\r\n        self.app:setVariable(\"Client ID\", storedClientID)\r\n        self.clientID = storedClientID\r\n    elseif (storedClientID == nil and self.clientID) then -- or storedClientID ~= self.clientID then\r\n        Globals:set('netatmo_client_id', self.clientID)\r\n    end\r\n    -- handling client secret\r\n    if string.len(self.clientSecret) < 4 and string.len(storedClientSecret) > 3 then\r\n        self.app:setVariable(\"Client Secret\", storedClientSecret)\r\n        self.clientSecret = storedClientSecret\r\n    elseif (storedClientSecret == nil and self.clientSecret) then -- or storedClientSecret ~= self.clientSecret then\r\n        Globals:set('netatmo_client_secret', self.clientSecret)\r\n    end\r\n    -- handling username\r\n    if string.len(self.username) < 4 and string.len(storedUsername) > 3 then\r\n        self.app:setVariable(\"Username\", storedUsername)\r\n        self.username = storedUsername\r\n    elseif (storedUsername == nil and self.username) then -- or storedUsername ~= self.username then\r\n        Globals:set('netatmo_username', self.username)\r\n    end\r\n    -- handling password\r\n    if string.len(self.password) < 4 and string.len(storedPassword) > 3 then\r\n        self.app:setVariable(\"Password\", storedPassword)\r\n        self.password = storedPassword\r\n    elseif (storedPassword == nil and self.password) then -- or storedPassword ~= self.password then\r\n        Globals:set('netatmo_password', self.password)\r\n    end\r\n    -- handling interval\r\n    if not self.interval or self.interval == \"\" then\r\n        if storedInterval and storedInterval ~= \"\" then\r\n            self.app:setVariable(\"Refresh Interval\", storedInterval)\r\n            self.interval = storedInterval\r\n        else\r\n            self.interval = \"5\"\r\n        end\r\n    end\r\n    if (storedInterval == \"\" and self.interval ~= \"\") then -- or storedInterval ~= self.interval then\r\n        Globals:set('netatmo_interval', self.interval)\r\n    end\r\nend"},{"name":"Globals","isMain":false,"isOpen":false,"content":"--[[\r\nGlobal variables handler\r\n@author ikubicki\r\n]]\r\nclass 'Globals'\r\n\r\nfunction Globals:get(name, alternative)\r\n    local response = api.get('/globalVariables/' .. name)\r\n    if response then\r\n        local char = string.sub(response.value, 1, 1)\r\n        if char == '{' or char == '\"' then\r\n            return json.decode(response.value)\r\n        end\r\n        return response.value\r\n    end\r\n    return alternative\r\nend\r\n\r\nfunction Globals:set(name, value)\r\n    local response = api.put('/globalVariables/' .. name, {\r\n        name = name,\r\n        value = json.encode(value)\r\n    })\r\n    if not response then\r\n        response = api.post('/globalVariables', {\r\n            name = name,\r\n            value = json.encode(value)\r\n        })\r\n        \r\n    end\r\n    if response ~= nil then\r\n        if response.type == 'ERROR' then\r\n            QuickApp:error('GLOBALS ERROR[' .. response.reason .. ']:', response.message)\r\n        end\r\n    end\r\nend"},{"name":"Auth","isMain":false,"isOpen":false,"content":"--[[\r\nNetatmo authentication class\r\n@author ikubicki\r\n]]\r\nclass 'Auth'\r\n\r\nfunction Auth:new(config)\r\n    self.config = config\r\n    self:init()\r\n    return self\r\nend\r\n\r\nfunction Auth:getHeaders(headers)\r\n    local token = self:getToken()\r\n    if string.len(token) > 0 then\r\n        headers['Authorization'] = 'Bearer ' .. token\r\n    end\r\n    return headers\r\nend\r\n\r\nfunction Auth:getToken()\r\n    local cache = Globals:get('netatmo_token')\r\n    if cache then\r\n        return cache.token\r\n    end\r\n    return \"\"\r\nend\r\n\r\nfunction Auth:init()\r\n    local timestamp = os.time(os.date(\"!*t\"))\r\n    local cache = Globals:get('netatmo_token')\r\n    if cache and cache.token and cache.expire > timestamp and cache.clientID == self.config:getClientID() then\r\n        return true\r\n    end\r\n\r\n    local http = HTTPClient:new()\r\n    local data = {\r\n        [\"grant_type\"] = 'password',\r\n        [\"scope\"] = 'read_station',\r\n        [\"client_id\"] = self.config:getClientID(),\r\n        [\"client_secret\"] = self.config:getClientSecret(),\r\n        [\"username\"] = self.config:getUsername(),\r\n        [\"password\"] = self.config:getPassword(),\r\n    }\r\n    QuickApp:debug(json.encode(data))\r\n    local callback = function(response)\r\n        local data = json.decode(response.data)\r\n        Globals:set('netatmo_token', {\r\n            clientID = self.config:getClientID(),\r\n            expire = timestamp + data.expires_in - 1000,\r\n            token = data.access_token,\r\n        })\r\n    end\r\n    http:postForm('https://api.netatmo.net/oauth2/token', data, callback)\r\n    fibaro.setTimeout(300000, function() self:init() end)\r\nend"},{"name":"HTTPClient","isMain":false,"isOpen":false,"content":"--[[\r\nHTTPClient wrapper\r\n@author ikubicki\r\n]]\r\nclass 'HTTPClient'\r\n\r\nfunction HTTPClient:new(options)\r\n    if not options then\r\n        options = {}\r\n    end\r\n    self.options = options\r\n    return self\r\nend\r\n\r\nfunction HTTPClient:get(url, success, error, headers)\r\n    local client = net.HTTPClient({timeout = 10000})\r\n    if not headers then\r\n        headers = {}\r\n    end\r\n    client:request(self:url(url), self:requestOptions(success, error, 'GET', nil, headers)) \r\nend\r\n\r\nfunction HTTPClient:post(url, data, success, error, headers)\r\n    local client = net.HTTPClient({timeout = 10000})\r\n    if not headers then\r\n        headers = {}\r\n    end\r\n    client:request(self:url(url), self:requestOptions(success, error, 'POST', data, headers)) \r\nend\r\n\r\nfunction HTTPClient:postForm(url, data, success, error, headers)\r\n    local client = net.HTTPClient({timeout = 10000})\r\n    if not headers then\r\n        headers = {}\r\n    end\r\n    headers[\"Content-Type\"] = 'application/x-www-form-urlencoded;charset=UTF-8'\r\n    client:request(self:url(url), self:requestOptions(success, error, 'POST', data, headers, true)) \r\nend\r\n\r\nfunction HTTPClient:put(url, data, success, error, headers)\r\n    local client = net.HTTPClient({timeout = 10000})\r\n    client:request(self:url(url), self:requestOptions(success, error, 'PUT', data, headers)) \r\nend\r\n\r\nfunction HTTPClient:delete(url, success, error, headers)\r\n    local client = net.HTTPClient({timeout = 10000})\r\n    if not headers then\r\n        headers = {}\r\n    end\r\n    client:request(self:url(url), self:requestOptions(success, error, 'DELETE', nil, headers)) \r\nend\r\n\r\nfunction HTTPClient:url(url)\r\n    if (string.sub(url, 0, 4) == 'http') then\r\n        return url\r\n    end\r\n    if not self.options.baseUrl then\r\n        self.options.baseUrl = 'http://localhost'\r\n    end\r\n    return self.options.baseUrl .. tostring(url)\r\nend\r\n\r\nfunction HTTPClient:requestOptions(success, error, method, data, headers, isFormData)\r\n    if error == nil then\r\n        error = function (error)\r\n            QuickApp:error(json.encode(error))\r\n        end\r\n    end\r\n    if method == nil then\r\n        method = 'GET'\r\n    end\r\n    local options = {\r\n        checkCertificate = false,\r\n        method = method,\r\n        headers = headers,\r\n    }\r\n    if data ~= nil then\r\n        if isFormData then\r\n            options.data = ''\r\n            for key, value in pairs(data) do\r\n                if string.len(options.data) > 0 then \r\n                    options.data = options.data .. '&'\r\n                end\r\n                options.data = options.data .. key .. '=' .. value\r\n            end\r\n        else\r\n            options.data = json.encode(data)\r\n        end\r\n    end\r\n    return {\r\n        options = options,\r\n        success = success,\r\n        error = error\r\n    }\r\nend"},{"name":"i18n","isMain":false,"isOpen":true,"content":"--[[\r\nInternationalization tool\r\n@author ikubicki\r\n]]\r\nclass 'i18n'\r\n\r\nfunction i18n:new(langCode)\r\n    self.phrases = phrases[langCode]\r\n    return self\r\nend\r\n\r\nfunction i18n:get(key)\r\n    if self.phrases[key] then\r\n        return self.phrases[key]\r\n    end\r\n    return key\r\nend\r\n\r\nphrases = {\r\n    pl = {\r\n        ['refresh'] = 'Odśwież',\r\n        ['last-update'] = 'Ostatnia aktualizacja: %s',\r\n        ['please-wait'] = 'Proszę czekać...',\r\n        ['Wind Strength'] = 'Siła wiatru',\r\n        ['Wind Angle'] = 'Kierunek wiatru',\r\n        ['Gust Strength'] = 'Siła porywu',\r\n        ['Gust Angle'] = 'Kierunek porywu',\r\n    },\r\n    en = {\r\n        ['refresh'] = 'Refresh',\r\n        ['last-update'] = 'Last update at %s',\r\n        ['please-wait'] = 'Please wait...',\r\n        ['Wind Strength'] = 'Wind Strength',\r\n        ['Wind Angle'] = 'Wind Angle',\r\n        ['Gust Strength'] = 'Gust Strength',\r\n        ['Gust Angle'] = 'Gust Angle',\r\n    },\r\n    de = {\r\n        ['refresh'] = 'Aktualisieren',\r\n        ['last-update'] = 'Letztes update: %s',\r\n        ['please-wait'] = 'Ein moment bitte...',\r\n        ['Wind Strength'] = 'Windstärke',\r\n        ['Wind Angle'] = 'Windwinkel',\r\n        ['Gust Strength'] = 'Böenstärke',\r\n        ['Gust Angle'] = 'Böenwinkel',\r\n    }\r\n}"}]}